fname = mfilename;
fname_end = strfind(mfilename,'_p_script');

fname = fname(1:fname_end-1);
meshfiles = {'octopusmesh3','octopusmesh6'};
% meshfiles = {'small_bar_h_4.80e-01','small_bar_h_2.50e-01','small_bar_h_2.00e-01'};
% meshfiles = {'coarseoctopus.1'};
meshfiles = {'coarsearmadillo'};
parameter_lists = {...
    'dt',[1/100],...
    'T',[1],...
    'solver',{'SemiImplicit_rescaled'},...
    'Y',4e4,...
    'P',0.45,...
    'rho',1e3,...
    'a',0,...
    'b',0.01,...
    'material_type',{'stvk'},...
    'gravity',{'on'},...
    'NMSC',[true],...
    'meshfile',meshfiles,...
    'scene_name',{'unif3'},...
    'eig_modes',6,...
    'fine_meshfile',{'armadillo'}
    };

% parameter_lists = {...
%     'dt',[1/100],...
%     'T',[1],...
%     'solver',{'SemiImplicit'},...
%     'Y',4e4,...
%     'P',0.45,...
%     'rho',1e3,...
%     'a',0,...
%     'b',0.01,...
%     'material_type',{'stvk'},...
%     'gravity',{'on'},...
%     'NMSC',[false],...
%     'meshfile',meshfiles,...
%     'scene_name',{'unif1'},...
%     };

parameter_lists = {...
    'dt',[1/100],...
    'T',[1],...
    'solver',{'SemiImplicit'},...
    'Y',4e4,...
    'P',0.45,...
    'rho',1e3,...
    'a',0,...
    'b',0.01,...
    'material_type',{'stvk'},...
    'gravity',{'on'},...
    'NMSC',[false],...
    'meshfile',meshfiles,...
    'scene_name',{'hete1'},...
    }; 


filename_list = parse_parameter(fname,[],parameter_lists);
annotation_list = parse_parameter('simulation3D_scene_annotation',[],parameter_lists);
% disp()
if ~iscell(filename_list)
    filename_list = {filename_list};
    annotation_list = {annotation_list};
end

vid_enum = 1;
video_name = [fname num2str(vid_enum) '.avi'];
while exist(video_name) == 2
    vid_enum = vid_enum+1;
    video_name = [fname num2str(vid_enum) '.avi'];
end

%%
colors = [summer(3); bone(3); copper(3)];
colors = colors(2:3:end,:);
edge_colors = num2cell(colors,2); % create a list of different colours

trajectories = cell(size(filename_list));
positionsMs = cell(size(filename_list));
indLogicals = cell(size(filename_list));
elems = cell(size(filename_list)); % faces
positionss = cell(size(filename_list));
axis_boxes = cell(size(filename_list));
lowests= cell(size(filename_list));
h = cell(size(filename_list));
kinetic_energies = cell(size(filename_list));



for i_filename = 1:length(filename_list)
    filename = filename_list{i_filename};
    
    S = load(filename);
    
    trajectories{i_filename} = S.trajectory;
    positionsMs{i_filename} = S.obj.X;
    indLogicals{i_filename} = S.indLogical;
    elems{i_filename} = S.obj.elem;
    positionss{i_filename} = S.obj.X;
    %         axis_boxes{i_filename} = S.axis_box;
    Ns(i_filename) = S.N;
    dt = S.dt; % TODO: make sure all the dt are the same across files for fair comparison
    tsteps = S.tsteps;
    lowests{i_filename} = min(min(S.trajectory(1:2:end/2,:)));
    kinetic_energies{i_filename} = S.kinetic_energy;
end
close all;

vid = VideoWriter(video_name);
vid.FrameRate = 50;
open(vid);


% boundary for the mesh in CG sim
boundaries = cell(size(filename_list));
for i_filename = 1:length(trajectories)
    u = trajectories{i_filename}(:,1);
    indLogical = indLogicals{i_filename};
    positions = positionss{i_filename};
    
    positions = u(1:end/2) + positionsMs{i_filename};
    node = transpose(reshape(positions,3,[]));
    
    %         TR = triangulation(elems{i_filename}, node(:,1), node(:,2));
    %         boundaries{i_filename} = freeBoundary(TR)';
end

close(vid)
figure
hold on
for i = 1:(length(kinetic_energies)-1)
    k_err = kinetic_energies{i} - kinetic_energies{end};
    plot(k_err)
end

print([fname 'k_err'],'-dpng')
savefig([fname 'k_err'])